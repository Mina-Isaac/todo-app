{"version":3,"sources":["constatnts.tsx","Store/Todos/todos.actions.tsx","Components/SharedComponents.tsx","Store/Pagination/pagination.actions.tsx","Components/Todos.tsx","Store/Posts/posts.actions.tsx","Components/Home.tsx","Components/Posts.tsx","Components/App.tsx","serviceWorker.ts","Store/services.tsx","Store/Posts/posts.reducer.tsx","Store/Todos/todos.reducer.tsx","Store/Pagination/pagination.reducer.tsx","Store/rootReducer.tsx","Store/Posts/posts.epic.tsx","Store/Todos/todos.epic.tsx","Store/rootEpic.tsx","Store/store.tsx","index.tsx"],"names":["TODOS_API_URL","POSTS_API_URL","ActionTypes","loadTodosAsync","createAsyncAction","editTodoAsync","Wrapper","styled","div","Title","h3","HrFlex","hr","Button","button","active","props","width","ListRendrer","loading","style","fontSize","fontWeight","data","setTodoOffset","createAction","offset","setPostOffset","Li","li","completed","Todos","dispatch","useDispatch","useEffect","request","numberOfTodos","useSelector","state","todos","length","pageCount","Math","ceil","pagination","todoOffset","slice","isLoadingTodos","todoList","useMemo","map","item","i","key","onClick","old","ind","new","textDecorationLine","undefined","title","previousLabel","nextLabel","breakLabel","className","breakClassName","forcePage","marginPagesDisplayed","pageRangeDisplayed","onPageChange","selected","containerClassName","pageClassName","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","loadPostsAsync","addPostAsync","Form","Input","input","TextArea","textarea","Home","useState","postTitle","setPostTitle","postBody","setPostBody","handleChange","type","event","value","target","latetsPosts","posts","isLoadingPosts","listItems","body","margin","padding","placeholder","required","onChange","rows","post","userId","Posts","numberOfposts","postOffset","postList","Container","SubWrapper","NavContainer","App","useHistory","push","pathname","location","handleClick","route","path","exact","component","Boolean","window","hostname","match","postsCache","todosCache","appServices","getAllPosts","Promise","resolve","axios","get","then","response","addPost","getAllTodos","editTodo","id","patch","postsReducer","combineReducers","action","getType","actions","success","failure","payload","todoReducer","newTodo","copy","paginationReducer","rootReducer","todosReducer","fetchPostsFlow","action$","state$","pipe","filter","isActionOf","postActions","switchMap","from","catchError","error","of","addPostFlow","fetchTodosFlow","todoActions","editTodoFlow","withLatestFrom","actionAndState","err","combineEpics","Object","values","postsEpics","todosEpics","epicMiddleware","createEpicMiddleware","dependencies","middleware","enhancer","compose","applyMiddleware","store","createStore","run","rootEpic","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9400b5e0.chunk.js","sourcesContent":["export const TODOS_API_URL = \"https://jsonplaceholder.typicode.com/todos\";\r\nexport const POSTS_API_URL = \"https://jsonplaceholder.typicode.com/posts\";\r\n\r\nexport type Post = {\r\n  id?: number;\r\n  title: string;\r\n  body: string;\r\n  userId: number\r\n};\r\n\r\nexport type Todo = {\r\n  id?: number;\r\n  title?: string;\r\n  completed: boolean;\r\n  userId?: number\r\n};\r\n\r\nexport const ActionTypes = {\r\n  //Posts action types\r\n  FETCH_POSTS: \"FETCH_POSTS\",\r\n  FETCH_POSTS_SUCCESS: \"FETCH_POSTS_SUCCESS\",\r\n  FETCH_POSTS_FAILURE: \"FETCH_POSTS_FAILURE\",\r\n\r\n  ADD_POST: \"ADD_POST\",\r\n  ADD_POST_SUCCESS: \"ADD_POST_SUCCESS\",\r\n  ADD_POST_FAILURE: \"ADD_POST_FAILURE\",\r\n\r\n//Todos action types\r\n  FETCH_TODOS: \"FETCH_TODOS\",\r\n  FETCH_TODOS_SUCCESS: \"FETCH_TODOS_SUCCESS\",\r\n  FETCH_TODOS_FAILURE: \"FETCH_TODOS_FAILURE\",\r\n\r\n  EDIT_TODO: \"EDIT_TODO\",\r\n  EDIT_TODO_SUCCESS: \"EDIT_TODO_SUCCESS\",\r\n  EDIT_TODO_FAILURE: \"EDIT_TODO_FAILURE\",\r\n\r\n\r\n  //Pagination action types\r\n  SET_TODO_OFFSET: 'SET_TODO_OFFSET',\r\n  SET_POST_OFFSET: 'SET_POST_OFFSET',\r\n};\r\n","import { createAsyncAction } from \"typesafe-actions\";\r\nimport { ActionTypes } from \"../../constatnts\";\r\nimport { Todo } from \"../../constatnts\";\r\n\r\nconst loadTodosAsync = createAsyncAction(\r\n  ActionTypes.FETCH_TODOS,\r\n  ActionTypes.FETCH_TODOS_SUCCESS,\r\n  ActionTypes.FETCH_TODOS_FAILURE\r\n)<undefined, Todo[], Error>();\r\n\r\n\r\nconst editTodoAsync = createAsyncAction(\r\n  ActionTypes.EDIT_TODO,\r\n  ActionTypes.EDIT_TODO_SUCCESS,\r\n  ActionTypes.EDIT_TODO_FAILURE\r\n)<{ind: number, old:Todo, new: Todo}, Todo, {ind: number, old: Todo, err: Error}>();\r\n\r\n\r\nexport {\r\n  loadTodosAsync,\r\n  editTodoAsync,\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nconst Wrapper = styled.div`\r\n  z-index: 1;\r\n  padding: 1% 2%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background: #fff;\r\n  width: 80vw;\r\n  height: 85vh;\r\n  border-radius: 6px;\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\r\n  margin: 10px auto auto auto;\r\n  overflow: auto;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n  color: green;\r\n  font-size: 12;\r\n  font-weight: bold;\r\n  align-self: baseline;\r\n`;\r\n\r\nconst HrFlex = styled.hr`\r\n  margin-left: 0;\r\n  margin-right: 0;\r\n`;\r\n\r\nconst Button = styled.button<{ width?: number | string; active?: boolean }>`\r\n  background-color: ${({active})=>active?'green': 'white'};\r\n  border: solid 2px green;\r\n  color: ${({active})=>active?'white': 'green'};\r\n  padding: 1% 2%;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 14;\r\n  font-weight: bold;\r\n  width: ${props => props.width};\r\n  border-radius: 5%;\r\n  transition-duration: 0.4s;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: green;\r\n    color: white;\r\n  }\r\n`;\r\n\r\ntype Props = {\r\n  data: any[];\r\n  loading: boolean;\r\n};\r\n\r\nconst ListRendrer: React.FunctionComponent<Props> = (props: Props) => {\r\n  return (\r\n    <>\r\n      {props.loading ? (\r\n        <span style={{ fontSize: 16, fontWeight: \"bold\" }}>Loading...</span>\r\n      ) : (\r\n        <ul>{props.data}</ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport { Wrapper, Title, Button, HrFlex, ListRendrer };\r\n","import { createAction } from \"typesafe-actions\";\r\nimport { ActionTypes } from \"../../constatnts\";\r\n\r\nconst setTodoOffset = createAction(\r\n  ActionTypes.SET_TODO_OFFSET, (offset: number)=>offset\r\n)<number>()\r\n\r\n\r\nconst setPostOffset = createAction(\r\n  ActionTypes.SET_POST_OFFSET, (offset: number)=>offset\r\n)<number>()\r\n\r\nexport {\r\n  setTodoOffset ,\r\n  setPostOffset,\r\n};\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppState } from \"../Store/store\";\r\nimport { loadTodosAsync, editTodoAsync } from \"../Store/Todos/todos.actions\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport * as Shared from \"./SharedComponents\";\r\nimport { setTodoOffset } from \"../Store/Pagination/pagination.actions\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Li = styled.li<{ completed: boolean }>`\r\n  font-size: 16;\r\n  margin: 1.5% 0;\r\n  font-weight: bold;\r\n  background-color: ${({ completed }) =>\r\n    completed ? \"rgba(0, 128, 0, 0.3)\" : \"rgba(255, 0, 0, 0.3)\"};\r\n`;\r\n\r\nconst Todos: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(loadTodosAsync.request());\r\n  }, []);\r\n  const numberOfTodos = useSelector(\r\n    (state: AppState) => state.todos.data.length\r\n  );\r\n  const perPage = 10;\r\n  const pageCount = Math.ceil(numberOfTodos / perPage);\r\n  const offset = useSelector((state: AppState) => state.pagination.todoOffset);\r\n  const todos = useSelector((state: AppState) =>\r\n    state.todos.data.slice(offset, offset + perPage)\r\n  );\r\n  const loading = useSelector((state: AppState) => state.todos.isLoadingTodos);\r\n  const handlePageClick = function({ selected }: { selected: number }) {\r\n    dispatch(setTodoOffset(selected * perPage));\r\n  };\r\n\r\n  const todoList = useMemo(\r\n    () =>\r\n      todos.map((item, i) => (\r\n        <Li\r\n          completed={item.completed}\r\n          key={i}\r\n          onClick={() => {\r\n            dispatch(\r\n              editTodoAsync.request({\r\n                old: item,\r\n                ind: i + offset,\r\n                new: { ...item, completed: !item.completed }\r\n              })\r\n            );\r\n          }}\r\n        >\r\n          <span\r\n            style={{\r\n              textDecorationLine: item.completed ? \"line-through\" : undefined\r\n            }}\r\n          >\r\n            {item.title}\r\n          </span>\r\n        </Li>\r\n      )),\r\n    [todos, dispatch, offset]\r\n  );\r\n\r\n  return (\r\n    <Shared.Wrapper>\r\n      <Shared.Title>Todo list</Shared.Title>\r\n      <Shared.HrFlex />\r\n      <Shared.ListRendrer\r\n        data={todoList}\r\n        loading={loading}\r\n      ></Shared.ListRendrer>\r\n      <ReactPaginate\r\n        previousLabel=\"Previous\"\r\n        nextLabel=\"Next\"\r\n        breakLabel={<span className=\"gap\">...</span>}\r\n        breakClassName=\"page-button\"\r\n        pageCount={pageCount}\r\n        forcePage={offset / perPage}\r\n        marginPagesDisplayed={0}\r\n        pageRangeDisplayed={5}\r\n        onPageChange={handlePageClick}\r\n        containerClassName=\"pagination\"\r\n        pageClassName=\"page-button\"\r\n        previousLinkClassName=\"page-nav\"\r\n        nextLinkClassName=\"page-nav\"\r\n        disabledClassName=\"disabled\"\r\n        activeClassName=\"active\"\r\n      />\r\n    </Shared.Wrapper>\r\n  );\r\n};\r\nexport default Todos;\r\n","import { createAsyncAction } from \"typesafe-actions\";\r\nimport { ActionTypes } from \"../../constatnts\";\r\nimport { Post } from \"../../constatnts\";\r\n\r\nconst loadPostsAsync = createAsyncAction(\r\n  ActionTypes.FETCH_POSTS,\r\n  ActionTypes.FETCH_POSTS_SUCCESS,\r\n  ActionTypes.FETCH_POSTS_FAILURE\r\n)<undefined, Post[], Error>();\r\n\r\n\r\nconst addPostAsync = createAsyncAction(\r\n  ActionTypes.ADD_POST,\r\n  ActionTypes.ADD_POST_SUCCESS,\r\n  ActionTypes.ADD_POST_FAILURE\r\n)<Post, Post, Error>();\r\n\r\nexport {\r\n  loadPostsAsync,\r\n  addPostAsync,\r\n};\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppState } from \"../Store/store\";\r\nimport { loadPostsAsync, addPostAsync } from \"../Store/Posts/posts.actions\";\r\nimport styled from \"styled-components\";\r\nimport * as Shared from \"./SharedComponents\";\r\n\r\nconst Wrapper = styled.div`\r\n  z-index: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 1% 2%;\r\n  background: #fff;\r\n  width: 40vw;\r\n  height: 48vh;\r\n  border-radius: 6px;\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\r\n  margin: 1% auto;\r\n  overflow: auto;\r\n`;\r\n\r\nconst Form = styled.div`\r\n  z-index: 1;\r\n  padding: 1% 2%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-evenly;\r\n  background: #fff;\r\n  width: 40vw;\r\n  height: 30vh;\r\n  border-radius: 6px;\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\r\n  margin: 1% auto 1% auto;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 90%;\r\n  font-family: \"Times New Roman\", Times, serif;\r\n  font-size: 14px;\r\n  border: solid 2px green;\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  resize: none;\r\n  width: 90%;\r\n  font-family: inherit;\r\n  font-size: 14px;\r\n  font-family: \"Times New Roman\", Times, serif;\r\n  border: solid 2px green;\r\n`;\r\n\r\nconst Home: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(loadPostsAsync.request());\r\n  }, []);\r\n  const [postTitle, setPostTitle] = useState(\"\");\r\n  const [postBody, setPostBody] = useState(\"\");\r\n  const handleChange = function(type: \"t\" | \"b\") {\r\n    return (\r\n      event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n    ) => {\r\n      const { value } = event.target;\r\n      type === \"t\" ? setPostTitle(value) : setPostBody(value);\r\n    };\r\n  };\r\n  const handleSubmit = function(event: React.MouseEvent) {\r\n    if (postTitle === \"\" || postBody === \"\") return;\r\n    const post = {\r\n      userId: 1,\r\n      title: postTitle,\r\n      body: postBody\r\n    };\r\n    dispatch(addPostAsync.request(post));\r\n    setPostTitle(\"\");\r\n    setPostBody(\"\");\r\n  };\r\n  let loading: boolean = true;\r\n  const latetsPosts = useSelector((state: AppState) => {\r\n    loading = state.posts.isLoadingPosts;\r\n    return state.posts.data.slice(-3);\r\n  });\r\n  const listItems = useMemo(\r\n    () =>\r\n      latetsPosts.map((item, i) => {\r\n        const body =\r\n          item.body.length >= 130 ? item.body.slice(0, 127) + \"...\" : item.body;\r\n        return (\r\n          <li key={i}>\r\n            <h4 style={{ margin: 0, padding: 0 }}>{item.title}</h4>\r\n            <p style={{ margin: 0, padding: 0 }}>{body}</p>\r\n          </li>\r\n        );\r\n      }),\r\n    [latetsPosts]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Wrapper>\r\n        <Shared.Title>Latest Posts</Shared.Title>\r\n        <Shared.HrFlex />\r\n        <Shared.ListRendrer\r\n          data={listItems}\r\n          loading={loading}\r\n        ></Shared.ListRendrer>\r\n      </Wrapper>\r\n      <Form>\r\n        <Shared.Title>Add a new post</Shared.Title>\r\n        <Input\r\n          placeholder=\"Please enter a title for your post\"\r\n          required\r\n          type=\"text\"\r\n          onChange={handleChange(\"t\")}\r\n          value={postTitle}\r\n        />\r\n        <br />\r\n        <TextArea\r\n          placeholder=\"Please enter your post here\"\r\n          required\r\n          rows={4}\r\n          onChange={handleChange(\"b\")}\r\n          value={postBody}\r\n        />\r\n        <br />\r\n        <Shared.Button\r\n          width = \"30%\"\r\n          onClick={handleSubmit}\r\n        >\r\n          {\" \"}\r\n          Add post{\" \"}\r\n        </Shared.Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\nexport default Home;\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppState } from \"../Store/store\";\r\nimport { loadPostsAsync } from \"../Store/Posts/posts.actions\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport * as Shared from \"./SharedComponents\";\r\nimport {setPostOffset} from '../Store/Pagination/pagination.actions'\r\n\r\nconst Posts: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(loadPostsAsync.request());\r\n  }, []);\r\n  const numberOfposts = useSelector(\r\n    (state: AppState) => state.posts.data.length\r\n  );\r\n  const perPage = 10;\r\n  const pageCount = Math.ceil(numberOfposts / perPage);\r\nconst offset = useSelector((state: AppState)=>state.pagination.postOffset)\r\n  const posts = useSelector((state: AppState) =>\r\n    state.posts.data.slice(offset, offset + perPage)\r\n  );\r\n  const loading = useSelector((state: AppState) => state.posts.isLoadingPosts);\r\n  const handlePageClick = function({ selected }: { selected: number }) {\r\n    dispatch(setPostOffset(selected * perPage));\r\n  };\r\n\r\n  const postList = useMemo(\r\n    () =>\r\n      posts.map((item, i) => {\r\n        const body =\r\n          item.body.length >= 133 ? item.body.slice(0, 130) + \"...\" : item.body;\r\n        return (\r\n          <li key={i}>\r\n            <h4 style={{ margin: 0, padding: 0 }}>{item.title}</h4>\r\n            <p style={{ margin: 0, padding: 0 }}>{body}</p>\r\n          </li>\r\n        );\r\n      }),\r\n    [posts]\r\n  );\r\n\r\n  return (\r\n    <Shared.Wrapper>\r\n      <Shared.Title>Posts</Shared.Title>\r\n      <Shared.HrFlex />\r\n        <Shared.ListRendrer\r\n          data={postList}\r\n          loading={loading}\r\n        ></Shared.ListRendrer>\r\n\r\n      <ReactPaginate\r\n        previousLabel={\"Previous\"}\r\n        nextLabel=\"Next\"\r\n        breakLabel={<span className=\"gap\">...</span>}\r\n        breakClassName={\"page-button\"}\r\n        pageCount={pageCount}\r\n        forcePage = {offset/ perPage}\r\n        marginPagesDisplayed={0}\r\n        pageRangeDisplayed={5}\r\n        onPageChange={handlePageClick}\r\n        containerClassName=\"pagination\"\r\n        pageClassName=\"page-button\"\r\n        previousLinkClassName=\"page-nav\"\r\n        nextLinkClassName=\"page-nav\"\r\n        disabledClassName=\"disabled\"\r\n        activeClassName=\"active\"\r\n      />\r\n    </Shared.Wrapper>\r\n  );\r\n};\r\nexport default Posts;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Route, Switch, useHistory } from \"react-router-dom\";\nimport Todos from \"./Todos\";\nimport Home from \"./Home\";\nimport Posts from \"./Posts\";\nimport { Button } from \"./SharedComponents\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: linear-gradient(#5cb8f7, #357dec) fixed;\n  background-attachment: fixed;\n  background-size: cover;\n`;\n\nconst SubWrapper = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  padding: 0;\n  margin-left: auto;\n  width: 20%;\n  height: 100%;\n`;\n\nconst NavContainer = styled.div`\n  align-items: center;\n  width: 96vw;\n  background-color: rgba(0, 0, 0, 0.4);\n  padding: 3px 2vw;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: auto;\n`;\n\nfunction App() {\n  const {\n    push,\n    location: { pathname }\n  } = useHistory();\n  function handleClick(route: string) {\n    return () => push(`/todo-app/${route}`);\n  }\n\n  return (\n    <>\n      <Container>\n        <NavContainer>\n          <Button\n            active={pathname === \"/todo-app/\" || pathname === \"/todo-app\"}\n            width=\"10\"\n            onClick={handleClick(\"\")}\n          >\n            Home\n          </Button>\n          <SubWrapper>\n            <Button\n              active={pathname === \"/todo-app/todos\"}\n              width=\"30%\"\n              onClick={handleClick(\"todos\")}\n            >\n              Todos\n            </Button>\n            <Button\n              active={pathname === \"/todo-app/posts\"}\n              width=\"30%\"\n              onClick={handleClick(\"posts\")}\n            >\n              Posts\n            </Button>\n          </SubWrapper>\n        </NavContainer>\n\n        <Switch>\n          <Route path=\"/todo-app/\" exact component={Home} />\n          <Route path=\"/todo-app/todos\" exact component={Todos} />\n          <Route path=\"/todo-app/posts\" exact component={Posts} />\n        </Switch>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { TODOS_API_URL, POSTS_API_URL } from \"../constatnts\";\r\nimport axios from \"axios\";\r\nimport { Post, Todo } from \"../constatnts\";\r\n\r\nlet postsCache: Post[] | null = null,\r\n  todosCache: Todo[] | null = null;\r\n\r\nconst appServices = {\r\n  getAllPosts(): Promise<Post[]> {\r\n    if (postsCache)\r\n      return new Promise((resolve) => resolve(postsCache!));\r\n    return axios.get(POSTS_API_URL).then(response => {\r\n      postsCache = response.data;\r\n      return response.data;\r\n    });\r\n  },\r\n\r\n  addPost(post: Post): Promise<Post> {\r\n    return axios.post(POSTS_API_URL, post).then(response => response.data);\r\n  },\r\n\r\n  getAllTodos(): Promise<Todo[]> {\r\n    if (todosCache)\r\n      return new Promise((resolve) => resolve(todosCache!));\r\n    return axios.get(TODOS_API_URL).then(response => {\r\n      todosCache = response.data;\r\n      return response.data;\r\n    });\r\n  },\r\n\r\n  editTodo(item: Todo): Promise<Todo> {\r\n    const path = `${TODOS_API_URL}/${item.id}`;\r\n    return axios.patch(path, item).then(response => response.data);\r\n  }\r\n};\r\n\r\nexport type Services = typeof appServices;\r\n\r\nexport default appServices;\r\n","import { ActionType, getType } from \"typesafe-actions\";\r\nimport * as actions from \"./posts.actions\";\r\nimport { combineReducers } from 'redux';\r\nimport { Post } from '../../constatnts'\r\n\r\n\r\nexport type Action = ActionType<typeof actions>\r\n\r\ntype LoadSuccess = ActionType<typeof actions.loadPostsAsync.success>;\r\ntype AddSuccess = ActionType<typeof actions.addPostAsync.success>;\r\n\r\n\r\nconst isLoadingPosts = (isLoading: boolean = false, action: Action): boolean => {\r\n  switch (action.type) {\r\n    case getType(actions.loadPostsAsync.request): return true;\r\n    case getType(actions.loadPostsAsync.success): return false;\r\n    case getType(actions.loadPostsAsync.failure): return false;\r\n    default: return false\r\n  }\r\n}\r\n\r\nconst data = (\r\n  data: Post[] = [],\r\n  action: Action\r\n): Post[] => {\r\n  switch (action.type) {\r\n\r\n    case getType(actions.loadPostsAsync.success):\r\n      return (action as LoadSuccess).payload\r\n\r\n\r\n    case getType(actions.loadPostsAsync.failure):\r\n      return []\r\n\r\n    case getType(actions.addPostAsync.success):\r\n      return [...data, (action as AddSuccess).payload]\r\n\r\n    default:\r\n      return data;\r\n  }\r\n};\r\n const postsReducer = combineReducers({isLoadingPosts, data});\r\n export default postsReducer\r\n\r\nexport type PostsState = ReturnType<typeof postsReducer>;\r\n","import { ActionType, getType } from \"typesafe-actions\";\r\nimport * as actions from \"./todos.actions\";\r\nimport { combineReducers } from \"redux\";\r\nimport { Todo } from \"../../constatnts\";\r\n\r\nexport type Action = ActionType<typeof actions>;\r\ntype LoadSuccess = ActionType<typeof actions.loadTodosAsync.success>;\r\ntype EditRequest = ActionType<typeof actions.editTodoAsync.request>;\r\ntype EditSuccess = ActionType<typeof actions.editTodoAsync.success>;\r\ntype EditFailure = ActionType<typeof actions.editTodoAsync.failure>;\r\n\r\nconst isLoadingTodos = (\r\n  isLoading: boolean = false,\r\n  action: Action\r\n): boolean => {\r\n  switch (action.type) {\r\n    case getType(actions.loadTodosAsync.request):\r\n      return true;\r\n    case getType(actions.loadTodosAsync.success):\r\n      return false;\r\n    case getType(actions.loadTodosAsync.failure):\r\n      return false;\r\n    default:\r\n      return false;\r\n  }\r\n};\r\nconst data = (data: Todo[] = [], action: Action): Todo[] => {\r\n  switch (action.type) {\r\n    case getType(actions.loadTodosAsync.success):\r\n      return (action as LoadSuccess).payload;\r\n\r\n    case getType(actions.loadTodosAsync.failure):\r\n      return [];\r\n\r\n    case getType(actions.editTodoAsync.request): {\r\n      const { ind } = (action as EditRequest).payload;\r\n      const { new: newTodo } = (action as EditRequest).payload;\r\n      const copy = [...data];\r\n      copy[ind] = { ...newTodo };\r\n      return copy;\r\n    }\r\n\r\n    case getType(actions.editTodoAsync.success): {\r\n      return data;\r\n    }\r\n\r\n    case getType(actions.editTodoAsync.failure): {\r\n      const copy = [...data];\r\n      const { ind } = (action as EditFailure).payload;\r\n      const { old } = (action as EditFailure).payload;\r\n      copy[ind] = { ...old };\r\n      return copy;\r\n    }\r\n    default:\r\n      return data;\r\n  }\r\n};\r\nconst todoReducer = combineReducers({ isLoadingTodos, data });\r\nexport type PostsState = ReturnType<typeof todoReducer>;\r\n\r\nexport default todoReducer;\r\n","import { ActionType, getType } from \"typesafe-actions\";\r\nimport * as actions from \"./pagination.actions\";\r\n\r\ntype Action = ActionType<typeof actions>;\r\ntype PaginationSettings = {\r\n  todoOffset: number;\r\n  postOffset: number;\r\n};\r\n\r\nconst paginationReducer = (\r\n  state: PaginationSettings = { todoOffset: 0, postOffset: 0 },\r\n  action: Action\r\n): PaginationSettings => {\r\n  switch (action.type) {\r\n    case getType(actions.setTodoOffset):\r\n      return { ...state, todoOffset: action.payload };\r\n    case getType(actions.setPostOffset):\r\n      return { ...state, postOffset: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default paginationReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport postsReducer from \"./Posts/posts.reducer\";\r\nimport todosReducer from './Todos/todos.reducer';\r\nimport paginationReducer from './Pagination/pagination.reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    posts: postsReducer,\r\n    todos: todosReducer,\r\n    pagination: paginationReducer,\r\n  });\r\n\r\n  export default rootReducer","import { of, from } from \"rxjs\";\r\nimport { Epic } from \"redux-observable\";\r\nimport * as postActions from \"./posts.actions\";\r\nimport { Action } from \"./posts.reducer\";\r\nimport {\r\n  catchError,\r\n  map,\r\n  filter,\r\n  switchMap,\r\n} from \"rxjs/operators\";\r\nimport { isActionOf } from \"typesafe-actions\";\r\nimport { AppState } from \"../store\";\r\nimport { Services } from \"../services\";\r\n\r\nexport const fetchPostsFlow: Epic<Action, Action, AppState, Services> = (\r\n  action$,\r\n  state$,\r\n  { getAllPosts }\r\n) =>\r\n  action$.pipe(\r\n    filter(isActionOf(postActions.loadPostsAsync.request)),\r\n    switchMap(() => from(getAllPosts())),\r\n    map(data => postActions.loadPostsAsync.success(data)),\r\n    catchError(error => of(postActions.loadPostsAsync.failure(error)))\r\n  );\r\n\r\n  export const addPostFlow: Epic<Action, Action, AppState, Services> = (\r\n    action$,\r\n    state$,\r\n    { addPost }\r\n  ) =>\r\n    action$.pipe(\r\n      filter(isActionOf(postActions.addPostAsync.request)),\r\n      switchMap(action => from(addPost(action.payload))),\r\n      map(postActions.addPostAsync.success),\r\n      catchError(error => of(postActions.loadPostsAsync.failure(error)))\r\n    );\r\n","import { of, from } from \"rxjs\";\r\nimport { Epic } from \"redux-observable\";\r\nimport * as todoActions from \"./todos.actions\";\r\nimport { Action } from \"./todos.reducer\";\r\nimport {\r\n  catchError,\r\n  map,\r\n  filter,\r\n  switchMap,\r\n  withLatestFrom\r\n} from \"rxjs/operators\";\r\nimport { isActionOf } from \"typesafe-actions\";\r\nimport { AppState } from \"../store\";\r\nimport { Services } from \"../services\";\r\n\r\nexport const fetchTodosFlow: Epic<Action, Action, AppState, Services> = (\r\n  action$,\r\n  state$,\r\n  { getAllTodos }\r\n) =>\r\n  action$.pipe(\r\n    filter(isActionOf(todoActions.loadTodosAsync.request)),\r\n    switchMap(action => from(getAllTodos())),\r\n    map(data => todoActions.loadTodosAsync.success(data)),\r\n    catchError(error => of(todoActions.loadTodosAsync.failure(error)))\r\n  );\r\n\r\nexport const editTodoFlow: Epic<Action, Action, AppState, Services> = (\r\n  action$,\r\n  state$,\r\n  { editTodo }\r\n) =>\r\n  action$.pipe(\r\n    filter(isActionOf(todoActions.editTodoAsync.request)),\r\n    withLatestFrom(state$),\r\n    switchMap(actionAndState => {\r\n      return from(editTodo(actionAndState[0].payload.new)).pipe(\r\n        map(() => todoActions.editTodoAsync.success(actionAndState[0].payload.new)),\r\n        catchError((err: Error) => {\r\n          const ind = actionAndState[0].payload.ind\r\n          const old = actionAndState[0].payload.old;\r\n          return of(todoActions.editTodoAsync.failure({ ind, old, err }));\r\n        })\r\n      );\r\n    })\r\n  );\r\n","import { combineEpics } from 'redux-observable';\r\nimport * as postsEpics from './Posts/posts.epic';\r\nimport * as todosEpics from './Todos/todos.epic'\r\n\r\nexport default combineEpics(...Object.values(postsEpics), ...Object.values(todosEpics))\r\n\r\n","import { applyMiddleware, compose, createStore, Middleware } from \"redux\";\r\nimport { createEpicMiddleware } from \"redux-observable\";\r\nimport { StateType, ActionType } from \"typesafe-actions\";\r\nimport appServices from \"./services\";\r\nimport rootReducer from \"./rootReducer\";\r\nimport rootAction from \"./rootActions\";\r\nimport rootEpic from \"./rootEpic\";\r\nimport {Services} from './services'\r\n\r\nexport type Action = ActionType<typeof rootAction>;\r\nexport type AppState = StateType<typeof rootReducer>;\r\nconst epicMiddleware = createEpicMiddleware<Action, Action, AppState, Services>({\r\n  dependencies: appServices\r\n});\r\nconst middleware: Middleware = epicMiddleware;\r\n\r\nconst enhancer = compose(applyMiddleware(middleware));\r\nconst store = createStore(rootReducer, enhancer);\r\nepicMiddleware.run(rootEpic);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./Store/store\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}